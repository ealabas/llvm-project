// MyISAAsmPrinter.h
#ifndef LLVM_LIB_TARGET_MYISA_MYISAASMPRINTER_H
#define LLVM_LIB_TARGET_MYISA_MYISAASMPRINTER_H

#include "MyISAMCInstLower.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/Support/Compiler.h"

namespace llvm {

class MCStreamer;
class MachineBasicBlock;
class MachineFunction;
class MachineInstr;
class Module;
class raw_ostream;

class LLVM_LIBRARY_VISIBILITY MyISAAsmPrinter : public AsmPrinter {
public:
  explicit MyISAAsmPrinter(TargetMachine &TM, std::unique_ptr<MCStreamer> Streamer)
      : AsmPrinter(TM, std::move(Streamer)) {}

  StringRef getPassName() const override { return "MyISA Assembly Printer"; }

  void emitInstruction(const MachineInstr *MI) override;
  void emitFunctionBodyEnd() override;
  void emitStartOfAsmFile(Module &M) override;
  void emitEndOfAsmFile(Module &M) override;

  bool runOnMachineFunction(MachineFunction &MF) override;

  // Auto-generated by tblgen
  bool PrintAsmOperand(const MachineInstr *MI, unsigned OpNo,
                       const char *ExtraCode, raw_ostream &O) override;
  bool PrintAsmMemoryOperand(const MachineInstr *MI, unsigned OpNo,
                             const char *ExtraCode, raw_ostream &O) override;

private:
  MyISAMCInstLower MCInstLowering;
};

} // namespace llvm

#endif // LLVM_LIB_TARGET_MYISA_MYISAASMPRINTER_H